/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace WildSaveRegistry {
  export type RescueDataStruct = {
    animal: string;
    location: string;
    description: string;
    imageHash: string;
    rescuer: AddressLike;
    timestamp: BigNumberish;
    latitude: BigNumberish;
    longitude: BigNumberish;
  };

  export type RescueDataStructOutput = [
    animal: string,
    location: string,
    description: string,
    imageHash: string,
    rescuer: string,
    timestamp: bigint,
    latitude: bigint,
    longitude: bigint
  ] & {
    animal: string;
    location: string;
    description: string;
    imageHash: string;
    rescuer: string;
    timestamp: bigint;
    latitude: bigint;
    longitude: bigint;
  };
}

export interface WildSaveRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addRescue"
      | "approve"
      | "balanceOf"
      | "baseTokenURI"
      | "claimIdentity"
      | "claimedTier"
      | "contributorTier"
      | "getApproved"
      | "getEncryptedTotal"
      | "getLastRescueTimestampHandle"
      | "getRescue"
      | "getRescueCountHandle"
      | "getRescuesByUser"
      | "getTotalRescues"
      | "getUserBadgeSeedHandle"
      | "grantMyCountAccess"
      | "grantMyCountAccessTransient"
      | "isApprovedForAll"
      | "isContributorAtLeast"
      | "name"
      | "owner"
      | "ownerOf"
      | "protocolId"
      | "renounceOwnership"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBaseTokenURI"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalRescues"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "OwnershipTransferred"
      | "RescueAdded"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addRescue",
    values: [
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "baseTokenURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimIdentity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedTier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contributorTier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRescueTimestampHandle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRescue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRescueCountHandle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRescuesByUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRescues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBadgeSeedHandle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantMyCountAccess",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantMyCountAccessTransient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isContributorAtLeast",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseTokenURI",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRescues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addRescue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributorTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastRescueTimestampHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRescue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRescueCountHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRescuesByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRescues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBadgeSeedHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMyCountAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMyCountAccessTransient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isContributorAtLeast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRescues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RescueAddedEvent {
  export type InputTuple = [
    rescueId: BigNumberish,
    rescuer: AddressLike,
    animal: string,
    location: string,
    imageHash: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    rescueId: bigint,
    rescuer: string,
    animal: string,
    location: string,
    imageHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    rescueId: bigint;
    rescuer: string;
    animal: string;
    location: string;
    imageHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WildSaveRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): WildSaveRegistry;
  waitForDeployment(): Promise<this>;

  interface: WildSaveRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addRescue: TypedContractMethod<
    [
      animal: string,
      location: string,
      description: string,
      imageHash: string,
      latitude: BigNumberish,
      longitude: BigNumberish,
      one: BytesLike,
      proof: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  baseTokenURI: TypedContractMethod<[], [string], "view">;

  claimIdentity: TypedContractMethod<
    [tier: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimedTier: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  contributorTier: TypedContractMethod<
    [tier1: BigNumberish, tier2: BigNumberish],
    [string],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getEncryptedTotal: TypedContractMethod<[], [string], "view">;

  getLastRescueTimestampHandle: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  getRescue: TypedContractMethod<
    [id: BigNumberish],
    [WildSaveRegistry.RescueDataStructOutput],
    "view"
  >;

  getRescueCountHandle: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  getRescuesByUser: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getTotalRescues: TypedContractMethod<[], [bigint], "view">;

  getUserBadgeSeedHandle: TypedContractMethod<
    [user: AddressLike],
    [string],
    "view"
  >;

  grantMyCountAccess: TypedContractMethod<
    [who: AddressLike],
    [void],
    "nonpayable"
  >;

  grantMyCountAccessTransient: TypedContractMethod<
    [who: AddressLike],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isContributorAtLeast: TypedContractMethod<
    [threshold: BigNumberish],
    [string],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBaseTokenURI: TypedContractMethod<
    [baseURI_: string],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalRescues: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addRescue"
  ): TypedContractMethod<
    [
      animal: string,
      location: string,
      description: string,
      imageHash: string,
      latitude: BigNumberish,
      longitude: BigNumberish,
      one: BytesLike,
      proof: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseTokenURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimIdentity"
  ): TypedContractMethod<[tier: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimedTier"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "contributorTier"
  ): TypedContractMethod<
    [tier1: BigNumberish, tier2: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedTotal"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLastRescueTimestampHandle"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRescue"
  ): TypedContractMethod<
    [id: BigNumberish],
    [WildSaveRegistry.RescueDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRescueCountHandle"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRescuesByUser"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTotalRescues"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBadgeSeedHandle"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantMyCountAccess"
  ): TypedContractMethod<[who: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "grantMyCountAccessTransient"
  ): TypedContractMethod<[who: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isContributorAtLeast"
  ): TypedContractMethod<[threshold: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseTokenURI"
  ): TypedContractMethod<[baseURI_: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalRescues"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RescueAdded"
  ): TypedContractEvent<
    RescueAddedEvent.InputTuple,
    RescueAddedEvent.OutputTuple,
    RescueAddedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RescueAdded(uint256,address,string,string,string,uint256)": TypedContractEvent<
      RescueAddedEvent.InputTuple,
      RescueAddedEvent.OutputTuple,
      RescueAddedEvent.OutputObject
    >;
    RescueAdded: TypedContractEvent<
      RescueAddedEvent.InputTuple,
      RescueAddedEvent.OutputTuple,
      RescueAddedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
